{-# LANGUAGE NoMonomorphismRestriction, FlexibleContexts, TypeFamilies #-}


module RandomImage (randomImageIO, RandomImageSettings (..)) where

import Diagrams.Prelude hiding (pad)
import System.Process
import Data.List (intersperse, isInfixOf)
import Data.Char
import System.Exit

data RandomImageSettings = RandomSet
                    {
                      randomSetting :: String
                    }
instance Default ComicSettings where
   def = ComicSet {shellcommand = "ls -d $(ls -d $HOME/Pictures/CalvinHobbes/*|shuf -n 1)/* | shuf -n 1 | tr -d '\n'"}

shellImageIO s  = do (e,n,er) <- readCreateProcessWithExitCode (shell (shellcommand s)) []
                     if e == ExitSuccess then
                       do res <-  loadImageEmb n
                          return $ case res of
                            Right img -> image img # sized (mkWidth 100)
                            Left _ -> text n # scale 3
                       else do print "Shell command error. Using empty diagram."
                               return mempty
